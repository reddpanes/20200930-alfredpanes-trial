{"version":3,"sources":["data/countries.ts","components/ConfirmDelete.tsx","components/InputForm.tsx","components/OutputView.tsx","App.tsx","utils/formatName.ts","serviceWorker.js","index.tsx"],"names":["countries","country","cities","ConfirmDelete","confirmDelete","setConfirmDelete","removeCSVData","visible","onCancel","okButtonProps","type","danger","centered","Option","Select","Text","Typography","inputSchema","yup","name","required","email","gender","oneOf","city","age","min","max","InputForm","saveData","useState","setCities","csvData","setCSVData","initialValues","validationSchema","onSubmit","values","handleSubmitForm","render","handleSubmit","errors","touched","setFieldValue","gutter","className","span","field","placeholder","addonBefore","style","color","value","width","onChange","marginTop","onSelect","_","option","index","map","key","margin","strong","justify","onDrop","data","newData","indivData","dataPair","price","parseFloat","shift","handleParseCSV","noDrag","addRemoveButton","onRemoveFile","htmlType","disabled","length","columns","title","dataIndex","dataSource","divStyle","display","justifyContent","borderBottom","OutputView","App","view","setView","setData","Group","e","target","Button","formattedName","newName","split","formatName","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb8cc1ba.chunk.js","sourcesContent":["type CountryType = {\n  country: string,\n  cities: string[],\n}\n\n\nconst countries:CountryType[] = [\n  {\n    country: 'Autria',\n    cities: ['Vienna']\n  },\n  {\n    country: 'Belarus',\n    cities: ['Minsk']\n  },\n  {\n    country: 'Bosnia',\n    cities: ['Sarajevo'],\n  },\n  {\n    country: 'Bulgaria',\n    cities: ['Sofia'],\n  },\n  {\n    country: 'Croatia',\n    cities: ['Zagreb'],\n  },\n  {\n    country: 'Czech Republic',\n    cities: ['Prague'],\n  },\n  {\n    country: 'Denmark',\n    cities: ['Copenhagen']\n  },\n  {\n    country: 'Finland',\n    cities: ['Helsinki']\n  },\n  {\n    country: 'France',\n    cities: ['Paris', 'Marseille'],\n  },\n  {\n    country: 'Germany',\n    cities: ['Hamburg', 'Munich', 'Cologne', 'Frankfurt', 'Essen', 'Dortmund', 'Stuttgart', 'Dusseldorf', 'Bremen', 'Duisburg', 'Hannover']\n  },\n  {\n    country: 'Greece',\n    cities: ['Athens', 'Salonika']\n  },\n  {\n    country: 'Italy',\n    cities: ['Rome', 'Milan', 'Naples', 'Turin', 'Palermo', 'Genova']\n  },\n  {\n    country: 'Lithuania',\n    cities: ['Vilnius'],\n  },\n  {\n    country: 'Moldova',\n    cities: ['Kishinev']\n  },\n  {\n    country: 'Netherlands',\n    cities: ['Amsterdam', 'Rotterdam'],\n  },\n  {\n    country: 'Norway',\n    cities: ['Oslo'],\n  },\n  {\n    country: 'Poland',\n    cities: ['Warsaw', 'Lódz', 'Kraków', 'Breslau', 'Poznan']\n  },\n  {\n    country: 'Portugal',\n    cities: ['Lisbon'],\n  },\n  {\n    country: 'Romania',\n    cities: ['Bucharest']\n  },\n  {\n    country: 'Russia',\n    cities: [\n      'Moscow',\n      'St Petersburg',\n      'Novosibirsk',\n      'Nizhny Novgorod',\n      'Ekaterinoburg',\n      'Samara',\n      'Omsk',\n      'Kazan',\n      'Ufa',\n      'Chelyabinsk',\n      'Perm',\n      'Rostov-na-Donu',\n      'Volgograd',\n      'Voronezh',\n      'Krasnoyarsk',\n      'Saratov',\n      'Tolyatti',\n      'Ulyanovsk',\n      'Izhevsk',\n      'Krasnodar',\n      'Yaroslave',\n      'Khabarovsk',\n      'Vladivostok',\n      'Irkutsk',\n      'Barnaul',\n      'Novokuznetsk',\n      'Penza',\n      'Ryazan',\n      'Orenburg',\n      'Naberezhnye Tchelny',\n      'Lipetsk',\n      'Tula',\n      'Tyumen',\n      'Kemerovo',\n    ]\n  },\n  {\n    country: 'UK',\n    cities: [\n      'London',\n      'Birmingham',\n      'Leeds',\n      'Glasgow',\n      'Sheffield',\n    ]\n  },\n  {\n    country: 'Ukraine',\n    cities: [\n      'Kiev',\n      'Kharkov',\n      'Dnepropetrovsk',\n      'Donetsk',\n      'Odessa',\n      'Zaporozhye',\n      'Lvov',\n      'Kryvy Rig',\n      'Mykolaiv',\n    ]\n  }\n];\n\nexport default countries;","import React from 'react';\nimport { Modal } from 'antd';\n\nexport default function ConfirmDelete({confirmDelete, setConfirmDelete, removeCSVData}: {confirmDelete: boolean, setConfirmDelete: Function, removeCSVData: Function}){\n  return(\n    <Modal\n      visible={confirmDelete}\n      onCancel={()=>setConfirmDelete(false)}\n      okButtonProps={{type:'primary', danger: true}}\n      centered\n    >\n      <p>Are you sure you want to replace the file?</p>\n    </Modal>\n  )\n}","import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport { Formik, Field, Form } from 'formik';\nimport { Row, Col, Input, Select, Button, Typography, Table } from 'antd'\n\n\n\n//citiesData\nimport countries from '../data/countries';\nimport UserDataType from \"../types/UserDataType\";\nimport {CSVReader} from \"react-papaparse\";\nimport ConfirmDelete from \"./ConfirmDelete\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\n\nconst inputSchema = yup.object({\n  name: yup.string().required('Name is required'),\n  email: yup.string().email().required('Email is required'),\n  gender: yup.mixed().oneOf(['Male', 'Female']).required('Gender is required'),\n  country: yup.string().required('Country is required'),\n  city: yup.string().required('City is required'),\n  age: yup.number().min(1).max(120).required('Age is required'),\n});\n\nexport default function InputForm({saveData}:{saveData: any}){\n\n  const [cities, setCities] = useState<string[]>([]);\n  const [confirmDelete, setConfirmDelete] = useState<boolean>(false);\n  const [csvData, setCSVData] = useState([]);\n\n  const initialValues: UserDataType = {\n    name: '',\n    email: '',\n    gender: '',\n    country: '',\n    city: '',\n    age: 0,\n  };\n\n  const handleSubmitForm = (values: UserDataType) => {\n    saveData(values);\n  };\n\n  const handleParseCSV = (csvData: any) => {\n\n    const newData = csvData.map( (indivData:any) => {\n      const dataPair = [...indivData.data];\n      return { name: [dataPair[0]], price : parseFloat(dataPair[1]) }\n    });\n    newData.shift();\n    setCSVData(newData);\n  };\n\n  const removeCSVData = () => {\n    setCSVData([]);\n    setConfirmDelete(false);\n  }\n\n\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={inputSchema}\n        onSubmit={(values: UserDataType) => handleSubmitForm(values)}\n        render={({ handleSubmit, errors, touched , setFieldValue, values})=>(\n          <Form\n            onSubmit={handleSubmit}\n          >\n            <Row gutter={16}>\n              <Col className={'gutter-row'} span={14}>\n                <Field\n                  name={'name'}\n                  render={({ field }: {field: any}) => (\n                    <Input\n                      { ...field }\n                      type={'text'}\n                      placeholder={'Last name, First name'}\n                      addonBefore={'Name'}\n                    />\n                  )}\n                />\n                {\n                  touched.name && errors.name\n                    ? <div style={{color: 'red'}}>{errors.name}</div>\n                    : null\n                }\n              </Col>\n              <Col className={'gutter-row'} span={5}>\n                <Field\n                  name={'gender'}\n                  value={values.gender}\n                  render={({field}:{field:any})=>(\n                      <Select\n                        placeholder={'Select Gender'}\n                        style={{width: '100%'}}\n                        onChange={(value)=>setFieldValue('gender', value)}\n                      >\n                        <Option value={'Male'}>Male</Option>\n                        <Option value={'Female'}>Female</Option>\n                      </Select>\n\n                  )}\n                >\n                </Field>\n                {\n                  touched.gender && errors.gender\n                    ? <div style={{color: 'red'}}>{errors.gender}</div>\n                    : null\n                }\n              </Col>\n              <Col className={'gutter-row'} span={5}>\n                <Field\n                  name={'age'}\n                  render={({ field }: {field: any}) => (\n                    <Input\n                      { ...field }\n                      type={'age'}\n                      placeholder={'Age'}\n                      addonBefore={'Age:'}\n                    />\n                  )}\n                />\n                {\n                  touched.age && errors.age\n                    ? <div style={{color: 'red'}}>{errors.age}</div>\n                    : null\n                }\n              </Col>\n            </Row>\n            <Row gutter={16} style={{marginTop: '10px'}}>\n              <Col className={'gutter-row'} span={14}>\n                <Field\n                  name={'email'}\n                  render={({ field }: {field: any}) => (\n                    <Input\n                      { ...field }\n                      type={'email'}\n                      placeholder={'Email'}\n                      addonBefore={'Email'}\n                    />\n                  )}\n                />\n                {\n                  touched.email && errors.email\n                    ? <div style={{color: 'red'}}>{errors.email}</div>\n                    : null\n                }\n              </Col>\n              <Col className={'gutter-row'} span={5}>\n                <Field\n                  name={'country'}\n                  value={values.country}\n                  render={({field}:{field:any})=>(\n                    <Select\n                      placeholder={'Select Country'}\n                      style={{width: '100%'}}\n                      onSelect={(_, option)=>setCities(countries[option.index].cities)}\n                      onChange={(value)=>setFieldValue('country', value)}\n                    >\n                      {countries.map((country, index: number)=>(\n                        <Option\n                          key={index}\n                          index={index}\n                          value={country.country}\n                        >{country.country}</Option>\n                      ))}\n                    </Select>\n\n                  )}\n                />\n                  {\n                    touched.country && errors.country\n                      ? <div style={{color: 'red'}}>{errors.country}</div>\n                      : null\n                  }\n              </Col>\n              <Col className={'gutter-row'} span={5}>\n                <Field\n                  name={'city'}\n                  value={values.city}\n                  render={({field}:{field:any})=>(\n                    <Select\n                      placeholder={'Select City'}\n                      style={{width: '100%'}}\n                      onChange={(value)=>setFieldValue('city', value)}>\n                      {cities.map((city, index: number)=>(\n                        <Option\n                          key={index}\n                          value={city}\n                        >{city}</Option>\n                      ))}\n                    </Select>\n\n                  )}\n                />\n                {\n                  touched.city && errors.city\n                    ? <div style={{color: 'red'}}>{errors.city}</div>\n                    : null\n                }\n              </Col>\n            </Row>\n            <div style={{margin: '20px 0'}}>\n              <Text strong >Input CSV Data</Text>\n            </div>\n\n            <Row gutter={16} justify={'center'}>\n              <Col span={11}>\n                <div style={{width:'80%'}}>\n                  <CSVReader\n                    onDrop={(data)=>handleParseCSV(data)}\n                    noDrag\n                    style={{width: '80%'}}\n                    addRemoveButton\n                    onRemoveFile={()=>setConfirmDelete(true)}\n                  >\n                    <span>Click to Upload</span>\n                  </CSVReader>\n                </div>\n                <Row justify={'center'} style={{marginTop: '20px'}}>\n                  <Button htmlType={'submit'} type={'primary'} disabled={csvData.length === 0}>Continue</Button>\n                </Row>\n              </Col>\n              <Col span={11}>\n                {csvData.length > 0 && <Table\n                  columns={[\n                    {\n                      title: 'Product Name',\n                      dataIndex: 'name',\n                      key: 'name'\n                    },\n                    {\n                      title: 'Price',\n                      dataIndex: 'price',\n                      key:'price',\n                    }\n                  ]}\n                  dataSource={csvData}\n                />}\n              </Col>\n\n            </Row>\n\n\n          </Form>\n        )}\n      />\n      <ConfirmDelete confirmDelete={confirmDelete} setConfirmDelete={setConfirmDelete} removeCSVData={removeCSVData}/>\n    </>\n  )\n}","import React from 'react';\nimport UserDataType from \"../types/UserDataType\";\nimport { Row, Col, Typography } from 'antd';\n\nconst { Text } = Typography;\n\nconst divStyle = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  borderBottom: '1px solid gray',\n  margin: '10px',\n}\n\nexport default function OutputView({data}: {data: UserDataType}){\n  return(\n    <>\n      <Row justify={'center'}>\n        <Col span={11} style={divStyle}>\n          <Text strong>Name:</Text>\n          <Text>{data.name}</Text>\n        </Col>\n        <Col span={11} style={divStyle}>\n          <Text strong>Email:</Text>\n          <Text>{data.email}</Text>\n        </Col>\n      </Row>\n      <Row justify={'center'}>\n        <Col span={11} style={divStyle}>\n          <Text strong>Gender:</Text>\n          <Text>{data.gender}</Text>\n        </Col>\n        <Col span={11} style={divStyle}>\n          <Text strong>Country:</Text>\n          <Text>{data.country}</Text>\n        </Col>\n      </Row>\n      <Row justify={'center'}>\n        <Col span={11} style={divStyle}>\n          <Text strong>Age:</Text>\n          <Text>{data.age}</Text>\n        </Col>\n        <Col span={11} style={divStyle}>\n          <Text strong>City:</Text>\n          <Text>{data.city}</Text>\n        </Col>\n      </Row>\n    </>\n  )\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { Radio, Row } from 'antd';\nimport InputForm from './components/InputForm';\nimport formatName from \"./utils/formatName\";\nimport UserDataType from \"./types/UserDataType\";\nimport OutputView from \"./components/OutputView\";\n\nfunction App() {\n\n  const [view, setView] = useState('input');\n  const [data, setData] = useState<UserDataType>({\n    name: '',\n    email: '',\n    gender: '',\n    country: '',\n    city: '',\n    age: 0,\n});\n\n  const saveData = (values: UserDataType ): any => {\n    const formattedName = formatName(values.name);\n    setData({\n      ...values, name: formattedName\n    });\n    setView('output');\n  }\n\n  return (\n    <>\n      <Row justify={'center'} style={{margin: '20px'}}>\n        <Radio.Group value={view} onChange={(e)=>setView(e.target.value)}>\n          <Radio.Button value={'input'}>INPUT</Radio.Button>\n          <Radio.Button value={'output'} disabled={!data}>OUTPUT</Radio.Button>\n        </Radio.Group>\n      </Row>\n      <div style={{margin: '0 10%'}}>\n        {view === 'input' ? <InputForm saveData={saveData}/> : <OutputView data={data}/>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/**\n  * This function formats the name from last name, first name to firstName lastName\n  * @param { string } name - the name to format\n * @ return { string } newFormatName - the new formatted name;\n  */\nexport default function formatName (name: string):string {\n\n  const newName = name.split(', ');\n  const newFormatName = `${newName[1]} ${newName[0]}`\n\n  return newFormatName;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//antd styles\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n  <React.StrictMode>\n      <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}